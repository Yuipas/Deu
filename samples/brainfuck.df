using std;

package BF:

documentation {
  # helloword.bf:
  # ">>,[<++++>-],<.>[<<+>+++>-]<--.<---[>+<-]>..+++.>.,+
  # [>+++++<-]>.[-]<<.+++.<,[>-<--]>-.++>,[<->-]<.[-]<<<<+.-"
}

<-- see ASCII table (https://en.wikipedia.org/wiki/ASCII) -->

const ASCII = [
  "\s","!","\"","#","$","%","&","'","(",")","*","+",",","-",".","/",
  "0","1","2","3","4","5","6","7","8","9",":",";","<","=",">","?","@",
  "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q",
  "R","S","T","U","V","W","X","Y","Z","[","~","]","^","_","a","b","c",
  "d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t",
  "u","v","w","x","y","z","{","}"
];

class Brainfuck {

  method constructor(cmd, memorySize = 20) {
    def text = cmd;
    def pointers = [0] * memorySize;
    def pointer = 0;
    def position = 0;
    def memorySize = memorySize;
    def loops = 0;
    def loopStart = [];
  }

  method _string() {
    let content = "";
    let p = this.pointer;
    let l = this.pointers.length - 1;

    this.pointers.iterate((v, i) =>
      content ~= (p === i ? ("* #{v as string} *") : v as string) ~ (i < l ? ", " : ""));
    return "[" ~ content ~ "]";
  }

  method nextToken() {
    let char = this.text[this.position++];
    return char;
  }

  method jumpLoop() {
    let char = this.text[this.position];
    let amout = 0;

    if char !== "[" {
      return
    }

    while (this.position < this.text.length) named jump {
      this.position++;
      char = this.text[this.position];

      if char === "]" {
        amout--;

        if amout < 0 {
          this.position++;
          break(jump);
        }
      } else if char === "[" {
        amout++;
      }
    }
  }

  method parseToken() {
    let char = this.nextToken();

    <-- Assigment -->
    if char === "+" {this.pointers[this.pointer]++;}
    else if char === "-" {this.pointers[this.pointer]--;}
    else if char === "," {this.pointers[this.pointer] = 10;}

    <-- Change pointers -->
    if char === "<" {this.pointer = math.max(this.pointer - 1, 0)}
    else if char === ">" {this.pointer = math.min(this.pointer + 1, this.memorySize)}

    <-- Control -->
    if char === "[" {
      if this.pointers[this.pointer] !== 0 {
        loops++;
        loopStart ~= this.position;
      } else {
        this.jumpLoop();
      }
    } else if char === "]" {
      if this.pointers[this.pointer] === 0 {
        loops--;
        loopStart.pop();
      } else {
        this.position = loopStart[-1];
      }
    }

    if char === "." {log(ASCII[this.pointers[this.pointer]])}
  }

  method parse() {
    while (this.position < this.text.length) {
      this.parseToken()
    }
  }
}


function main() {
  let cmd = io.read("helloworld.bf");
  let parser = new Brainfuck(cmd, 10);

  parser.parse();
}
